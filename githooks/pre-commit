#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
git diff-index --check --cached $against --
if [ $? -ne 0 ]; then
    exit 1
fi

######## End of example pre-commit hook
PREFIX="PRECOMMIT_HOOK: "

hook_log() {
	echo "${PREFIX}$1"
}

hook_log "Starting checks..."

# Find staged Go files
files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')
if [ -z "$files" ]; then
	hook_log "No Go files to check. Exiting..."
    exit 0
fi


# Note: ./... means all packages in and below the current directory

# Run go fmt, automate formatting
if ! go fmt ./...; then
	hook_log "Go files not formatted:"
	hook_log "Please run 'go fmt ./...' to format your code."
	exit 1
fi

# Add formatted files to the staging area if go fmt made changes
if ! git diff --quiet; then
	git add $files
	hook_log "Go files were formatted and re-staged."
fi

# Run go vet to catch suspicious constructs
if ! go vet ./...; then
	hook_log "go vet found issues. Please fix them before committing."
	exit 1
fi

# Run go test to ensure tests pass
if ! go test ./...; then
	hook_log "go test failed. Please fix tests before committing."
	exit 1
fi

hook_log "Code reformatting and checks passed."
